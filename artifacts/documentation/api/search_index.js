var search_data = {
    'index': {
        'searchIndex': ["icecave","icecave\\duct","icecave\\duct\\exception","icecave\\duct\\exception\\lexerexception","icecave\\duct\\exception\\parserexception","icecave\\duct\\exception\\syntaxexceptioninterface","icecave\\duct\\lexer","icecave\\duct\\lexerstate","icecave\\duct\\parser","icecave\\duct\\parserstate","icecave\\duct\\token","icecave\\duct\\tokenstreamparser","icecave\\duct\\tokentype","icecave\\duct\\lexer::__construct","icecave\\duct\\lexer::reset","icecave\\duct\\lexer::lex","icecave\\duct\\lexer::feed","icecave\\duct\\lexer::finalize","icecave\\duct\\lexer::tokens","icecave\\duct\\parser::__construct","icecave\\duct\\parser::parse","icecave\\duct\\parser::reset","icecave\\duct\\parser::feed","icecave\\duct\\parser::finalize","icecave\\duct\\parser::values","icecave\\duct\\parser::on","icecave\\duct\\parser::once","icecave\\duct\\parser::removelistener","icecave\\duct\\parser::removealllisteners","icecave\\duct\\parser::listeners","icecave\\duct\\parser::emit","icecave\\duct\\token::__construct","icecave\\duct\\token::createspecial","icecave\\duct\\token::createliteral","icecave\\duct\\token::type","icecave\\duct\\token::value","icecave\\duct\\tokenstreamparser::__construct","icecave\\duct\\tokenstreamparser::parse","icecave\\duct\\tokenstreamparser::reset","icecave\\duct\\tokenstreamparser::feed","icecave\\duct\\tokenstreamparser::finalize","icecave\\duct\\tokenstreamparser::values"],
        'info': [["Icecave","","Icecave.html","","",3],["Icecave\\Duct","","Icecave\/Duct.html","","",3],["Icecave\\Duct\\Exception","","Icecave\/Duct\/Exception.html","","",3],["LexerException","Icecave\\Duct\\Exception","Icecave\/Duct\/Exception\/LexerException.html"," < RuntimeException","",1],["ParserException","Icecave\\Duct\\Exception","Icecave\/Duct\/Exception\/ParserException.html"," < RuntimeException","",1],["SyntaxExceptionInterface","Icecave\\Duct\\Exception","Icecave\/Duct\/Exception\/SyntaxExceptionInterface.html","","",1],["Lexer","Icecave\\Duct","Icecave\/Duct\/Lexer.html","","Streaming JSON lexer.",1],["LexerState","Icecave\\Duct","Icecave\/Duct\/LexerState.html"," < Enumeration","",1],["Parser","Icecave\\Duct","Icecave\/Duct\/Parser.html","","Streaming JSON parser.",1],["ParserState","Icecave\\Duct","Icecave\/Duct\/ParserState.html"," < Enumeration","",1],["Token","Icecave\\Duct","Icecave\/Duct\/Token.html","","A JSON token produced by the lexer.",1],["TokenStreamParser","Icecave\\Duct","Icecave\/Duct\/TokenStreamParser.html"," < EventEmitter","Streaming token parser.",1],["TokenType","Icecave\\Duct","Icecave\/Duct\/TokenType.html"," < Enumeration","",1],["Lexer::__construct","Icecave\\Duct\\Lexer","Icecave\/Duct\/Lexer.html#method___construct","(string $encoding = &#039;UTF-8&#039;)","",2],["Lexer::reset","Icecave\\Duct\\Lexer","Icecave\/Duct\/Lexer.html#method_reset","()","Reset the lexer, discarding any untokened input.",2],["Lexer::lex","Icecave\\Duct\\Lexer","Icecave\/Duct\/Lexer.html#method_lex","(string $buffer)","Tokenize JSON data.",2],["Lexer::feed","Icecave\\Duct\\Lexer","Icecave\/Duct\/Lexer.html#method_feed","(string $buffer)","Feed JSON data to the lexer.",2],["Lexer::finalize","Icecave\\Duct\\Lexer","Icecave\/Duct\/Lexer.html#method_finalize","()","Complete tokenization.",2],["Lexer::tokens","Icecave\\Duct\\Lexer","Icecave\/Duct\/Lexer.html#method_tokens","()","Fetch the tokens produced by the lexer so far and remove",2],["Parser::__construct","Icecave\\Duct\\Parser","Icecave\/Duct\/Parser.html#method___construct","(<a href=\"Icecave\/Duct\/Lexer.html\"><abbr title=\"Icecave\\Duct\\Lexer\">Lexer<\/abbr><\/a> $lexer = null, <a href=\"Icecave\/Duct\/TokenStreamParser.html\"><abbr title=\"Icecave\\Duct\\TokenStreamParser\">TokenStreamParser<\/abbr><\/a> $parser = null)","",2],["Parser::parse","Icecave\\Duct\\Parser","Icecave\/Duct\/Parser.html#method_parse","(string $buffer)","Parse one or more complete JSON values.",2],["Parser::reset","Icecave\\Duct\\Parser","Icecave\/Duct\/Parser.html#method_reset","()","Reset the parser, discarding any previously parsed",2],["Parser::feed","Icecave\\Duct\\Parser","Icecave\/Duct\/Parser.html#method_feed","(string $buffer)","Feed (potentially incomplete) JSON data to the parser.",2],["Parser::finalize","Icecave\\Duct\\Parser","Icecave\/Duct\/Parser.html#method_finalize","()","Finalize parsing.",2],["Parser::values","Icecave\\Duct\\Parser","Icecave\/Duct\/Parser.html#method_values","()","Fetch the values produced by the parser so far and",2],["Parser::on","Icecave\\Duct\\Parser","Icecave\/Duct\/Parser.html#method_on","(string $event, <abbr title=\"Icecave\\Duct\\callable\">callable<\/abbr> $listener)","",2],["Parser::once","Icecave\\Duct\\Parser","Icecave\/Duct\/Parser.html#method_once","(string $event, <abbr title=\"Icecave\\Duct\\callable\">callable<\/abbr> $listener)","",2],["Parser::removeListener","Icecave\\Duct\\Parser","Icecave\/Duct\/Parser.html#method_removeListener","(string $event, <abbr title=\"Icecave\\Duct\\callable\">callable<\/abbr> $listener)","",2],["Parser::removeAllListeners","Icecave\\Duct\\Parser","Icecave\/Duct\/Parser.html#method_removeAllListeners","(string|null $event = null)","",2],["Parser::listeners","Icecave\\Duct\\Parser","Icecave\/Duct\/Parser.html#method_listeners","(string $event)","",2],["Parser::emit","Icecave\\Duct\\Parser","Icecave\/Duct\/Parser.html#method_emit","(string $event, array $arguments = array())","",2],["Token::__construct","Icecave\\Duct\\Token","Icecave\/Duct\/Token.html#method___construct","(<a href=\"Icecave\/Duct\/TokenType.html\"><abbr title=\"Icecave\\Duct\\TokenType\">TokenType<\/abbr><\/a> $type, mixed $value)","",2],["Token::createSpecial","Icecave\\Duct\\Token","Icecave\/Duct\/Token.html#method_createSpecial","(string $value)","Create a 'special' token.",2],["Token::createLiteral","Icecave\\Duct\\Token","Icecave\/Duct\/Token.html#method_createLiteral","(mixed $value)","Create a token that represents a literal value.",2],["Token::type","Icecave\\Duct\\Token","Icecave\/Duct\/Token.html#method_type","()","Fetch the type of the token.",2],["Token::value","Icecave\\Duct\\Token","Icecave\/Duct\/Token.html#method_value","()","Fetch the value of the token.",2],["TokenStreamParser::__construct","Icecave\\Duct\\TokenStreamParser","Icecave\/Duct\/TokenStreamParser.html#method___construct","()","",2],["TokenStreamParser::parse","Icecave\\Duct\\TokenStreamParser","Icecave\/Duct\/TokenStreamParser.html#method_parse","(<abbr title=\"Icecave\\Duct\\mixed&lt;Token&gt;\">mixed&lt;Token&gt;<\/abbr> $tokens)","Parse a stream of tokens representing one or more complete",2],["TokenStreamParser::reset","Icecave\\Duct\\TokenStreamParser","Icecave\/Duct\/TokenStreamParser.html#method_reset","()","Reset the parser, discarding any previously parsed",2],["TokenStreamParser::feed","Icecave\\Duct\\TokenStreamParser","Icecave\/Duct\/TokenStreamParser.html#method_feed","(<abbr title=\"Icecave\\Duct\\mixed&lt;Token&gt;\">mixed&lt;Token&gt;<\/abbr> $tokens)","Feed tokens to the parser.",2],["TokenStreamParser::finalize","Icecave\\Duct\\TokenStreamParser","Icecave\/Duct\/TokenStreamParser.html#method_finalize","()","Finalize parsing.",2],["TokenStreamParser::values","Icecave\\Duct\\TokenStreamParser","Icecave\/Duct\/TokenStreamParser.html#method_values","()","Fetch the values produced by the parser so far and",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']